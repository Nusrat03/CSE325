 #include <stdio.h>

typedef struct Process {
    int arrivalTime;
    int burstTime;
    int startingTime;
    int finishingTime;
    int completed;
} Process;

int shortestJob(Process processes[], int n) {
    int shortest = 0;

    for (int i = 0; i < n; i++) {
        if (processes[i].burstTime < processes[shortest].burstTime && processes[i].completed == 0) {
            shortest = i;
        }

        if (processes[i].burstTime > processes[shortest].burstTime && processes[shortest].completed == 1) {
            shortest = i;
        }

        if (processes[i].burstTime == processes[shortest].burstTime) {
            if (processes[shortest].completed) {
                shortest = i;
            }
        }
    }

    return shortest;
}

int arrivedJob(Process processes[], int n) {
    int first = 0;

    for (int i = 0; i < n; i++) {

        if (processes[i].arrivalTime < processes[first].arrivalTime && processes[i].completed == 0) {
            first = i;
        }

        if (processes[i].arrivalTime > processes[first].arrivalTime && processes[first].completed == 1) {
            first = i;
        }

        if (processes[i].arrivalTime == processes[first].arrivalTime) {
            if (processes[first].completed) {
                first = i;
            }
        }
    }

    return first;
}

int main() {
    int n = 4;
    Process processes[4] = {
            {5, 6, 0, 0, 0},
            {3, 7, 0, 0, 0},
            {7, 5, 0, 0, 0},
            {8, 7, 0, 0, 0},
    };
    
    int completedTime = 0;

    for (int i = 0; i < n; i++) {
        int shortestjob = shortestJob(processes, n);
        int earlyArrivedJob = arrivedJob(processes, n);

        int ongoingJob = shortestjob;

        if (processes[ongoingJob].arrivalTime > completedTime) {
            ongoingJob = earlyArrivedJob;

            if (completedTime < processes[ongoingJob].arrivalTime) {
                completedTime = processes[ongoingJob].arrivalTime;
            }
        }

        processes[ongoingJob].startingTime = completedTime;
        completedTime += processes[ongoingJob].burstTime;

        processes[ongoingJob].finishingTime = completedTime;
        processes[ongoingJob].completed = 1;
    }

    printf("Processes\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t\t%d\t\t\t%d\n", i + 1, processes[i].startingTime - processes[i].arrivalTime, processes[i].finishingTime - processes[i].arrivalTime);
    }

    return 0;
}
